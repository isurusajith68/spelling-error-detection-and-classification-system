{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Model Training, Testing, and Visualization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import jellyfish\n",
        "from collections import deque, defaultdict\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.models import Model, load_model\n",
        "from tensorflow.keras.layers import Input, Embedding, LSTM, Dense, GlobalMaxPooling1D, Dropout, Bidirectional, Concatenate\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "from tensorflow.keras.metrics import SparseCategoricalAccuracy\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "import tensorflow as tf\n",
        "import json\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "print(\"TF Version:\", tf.__version__)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "class DataProcessor:\n",
        "    def __init__(self, dataset_path=None, metadata_path=None):\n",
        "        if dataset_path:\n",
        "            self.df = pd.read_csv(dataset_path)\n",
        "            self.df = self.clean_dataset(self.df)\n",
        "            self.correct_words = set(self.df['Correct Word'].str.lower())\n",
        "            self.all_words = pd.concat([self.df['Incorrect Word'], self.df['Correct Word']]).unique()\n",
        "            self._create_char_encoding()\n",
        "            self.error_types = self.df[self.df['Error Type'] != 'Correct']['Error Type'].unique()\n",
        "            self.label_encoder = {et: i for i, et in enumerate(self.error_types)}\n",
        "            self.inverse_label_encoder = {i: et for et, i in self.label_encoder.items()}\n",
        "        elif metadata_path:\n",
        "            with open(metadata_path, 'r') as f:\n",
        "                metadata = json.load(f)\n",
        "            self.char_to_int = metadata['char_to_int']\n",
        "            self.max_length = metadata['max_length']\n",
        "            self.correct_words = set(metadata['correct_words'])\n",
        "            self.label_encoder = metadata['label_encoder']\n",
        "            self.inverse_label_encoder = {int(k): v for k, v in metadata['inverse_label_encoder'].items()}\n",
        "\n",
        "    def _create_char_encoding(self):\n",
        "        chars = set(''.join(self.all_words))\n",
        "        self.char_to_int = {c: i+1 for i, c in enumerate(chars)}\n",
        "        self.int_to_char = {i: c for c, i in self.char_to_int.items()}\n",
        "        self.max_length = int(np.percentile([len(word) for word in self.all_words], 95))\n",
        "\n",
        "    def preprocess_word(self, word):\n",
        "        processed = word.lower().ljust(self.max_length)[:self.max_length]\n",
        "        return [self.char_to_int.get(c, 0) for c in processed]\n",
        "\n",
        "    def phonetic_features(self, word, correct_word=None):\n",
        "        word = word.lower()\n",
        "        correct_word = correct_word or word\n",
        "        edits = jellyfish.levenshtein_distance(word, correct_word)\n",
        "        transposition_flag = 1 if any(word[i:i+2] == correct_word[i+1:i-1:-1] for i in range(len(word)-1)) and len(word) == len(correct_word) else 0\n",
        "        omission_flag = 1 if len(word) < len(correct_word) else 0\n",
        "        phoneme_mismatch_flag = 1 if jellyfish.metaphone(word) != jellyfish.metaphone(correct_word) and not transposition_flag else 0\n",
        "        silent_letter_flag = 1 if edits > 0 and jellyfish.soundex(word) == jellyfish.soundex(correct_word) and not omission_flag else 0\n",
        "        reversal_flag = 1 if word[::-1] == correct_word or sum(a != b for a, b in zip(word[::-1], correct_word)) <= 2 else 0\n",
        "        return np.array([edits, transposition_flag, omission_flag, phoneme_mismatch_flag, silent_letter_flag, reversal_flag], dtype=float)\n",
        "\n",
        "    def clean_dataset(self, df):\n",
        "        df.loc[df['Incorrect Word'] == df['Correct Word'], 'Error Type'] = 'Correct'\n",
        "        df = df.drop_duplicates(subset=['Incorrect Word', 'Correct Word'], keep='first')\n",
        "        return df\n",
        "\n",
        "class DifficultyManager:\n",
        "    def __init__(self):\n",
        "        self.difficulty = 1\n",
        "        self.performance = deque(maxlen=10)\n",
        "\n",
        "    def update(self, correct):\n",
        "        self.performance.append(correct)\n",
        "        success_rate = np.mean(self.performance) if len(self.performance) > 0 else 0\n",
        "        if success_rate > 0.7:\n",
        "            self.difficulty = min(5, self.difficulty + 1)\n",
        "        elif success_rate < 0.3:\n",
        "            self.difficulty = max(1, self.difficulty - 1)\n",
        "\n",
        "class GameEngine:\n",
        "    def __init__(self):\n",
        "        self.score = 0\n",
        "        self.streak = 0\n",
        "        self.level = 1\n",
        "\n",
        "    def update(self, correct, difficulty):\n",
        "        if correct:\n",
        "            self.streak += 1\n",
        "            self.score += (10 * difficulty) + (5 * self.streak)\n",
        "            if self.score >= self.level * 100:\n",
        "                self.level = min(10, self.level + 1)\n",
        "        else:\n",
        "            self.streak = 0\n",
        "            self.score = max(0, self.score - (2 * difficulty))\n",
        "            if self.score < (self.level - 1) * 100:\n",
        "                self.level = max(1, self.level - 1)\n",
        "\n",
        "class SpellingTutor:\n",
        "    def __init__(self, dataset_path=None, metadata_path=None, model_path=None):\n",
        "        if dataset_path:\n",
        "            self.processor = DataProcessor(dataset_path=dataset_path)\n",
        "            self.difficulty = DifficultyManager()\n",
        "            self.game = GameEngine()\n",
        "            self._prepare_training_data()\n",
        "            self.model = self._build_model()\n",
        "            self.history = self._train_model()\n",
        "        elif metadata_path and model_path:\n",
        "            self.processor = DataProcessor(metadata_path=metadata_path)\n",
        "            self.model = load_model(model_path)\n",
        "            self.difficulty = DifficultyManager()\n",
        "            self.game = GameEngine()\n",
        "\n",
        "    def _prepare_training_data(self):\n",
        "        train_df, val_df = train_test_split(self.processor.df[self.processor.df['Error Type'] != 'Correct'], \n",
        "                                           test_size=0.2, random_state=42)\n",
        "        self.X_train_seq = np.array([self.processor.preprocess_word(w) for w in train_df['Incorrect Word']])\n",
        "        self.X_train_ph = np.array([self.processor.phonetic_features(w) for w in train_df['Incorrect Word']])\n",
        "        self.y_train = np.array([self.processor.label_encoder[et] for et in train_df['Error Type']])\n",
        "        self.X_val_seq = np.array([self.processor.preprocess_word(w) for w in val_df['Incorrect Word']])\n",
        "        self.X_val_ph = np.array([self.processor.phonetic_features(w) for w in val_df['Incorrect Word']])\n",
        "        self.y_val = np.array([self.processor.label_encoder[et] for et in val_df['Error Type']])\n",
        "        self.val_words = val_df['Incorrect Word'].values\n",
        "\n",
        "    def _build_model(self):\n",
        "        seq_inputs = Input(shape=(self.processor.max_length,))\n",
        "        ph_inputs = Input(shape=(6,))\n",
        "        x = Embedding(input_dim=len(self.processor.char_to_int)+1, output_dim=128, mask_zero=True)(seq_inputs)\n",
        "        x = Bidirectional(LSTM(512, return_sequences=True, dropout=0.2))(x)\n",
        "        x = Bidirectional(LSTM(256, return_sequences=True, dropout=0.2))(x)\n",
        "        x = GlobalMaxPooling1D()(x)\n",
        "        x = Concatenate()([x, ph_inputs])\n",
        "        x = Dense(128, activation='relu')(x)\n",
        "        x = Dropout(0.2)(x)\n",
        "        outputs = Dense(len(self.processor.error_types), activation='softmax')(x)\n",
        "        model = Model(inputs=[seq_inputs, ph_inputs], outputs=outputs)\n",
        "        model.compile(loss='sparse_categorical_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=[SparseCategoricalAccuracy()])\n",
        "        return model\n",
        "\n",
        "    def _train_model(self):\n",
        "        history = self.model.fit([self.X_train_seq, self.X_train_ph], self.y_train, epochs=30, batch_size=32, \n",
        "                       validation_data=([self.X_val_seq, self.X_val_ph], self.y_val), \n",
        "                       callbacks=[EarlyStopping(patience=10, restore_best_weights=True)])\n",
        "        self.model.save('spelling_tutor_model.h5', save_format='h5')\n",
        "        metadata = {\n",
        "            'char_to_int': self.processor.char_to_int,\n",
        "            'max_length': self.processor.max_length,\n",
        "            'correct_words': list(self.processor.correct_words),\n",
        "            'label_encoder': self.processor.label_encoder,\n",
        "            'inverse_label_encoder': {str(k): v for k, v in self.processor.inverse_label_encoder.items()}\n",
        "        }\n",
        "        with open('spelling_tutor_metadata.json', 'w') as f:\n",
        "            json.dump(metadata, f)\n",
        "        return history\n",
        "\n",
        "    def process_word(self, word):\n",
        "        correct = word.lower() in self.processor.correct_words\n",
        "        if correct:\n",
        "            error_type = None\n",
        "            confidence = 1.0\n",
        "            ph_input = self.processor.phonetic_features(word)\n",
        "        else:\n",
        "            seq_input = np.array([self.processor.preprocess_word(word)])\n",
        "            ph_input = np.array([self.processor.phonetic_features(word)])\n",
        "            proba = self.model.predict([seq_input, ph_input])[0]\n",
        "            error_type_idx = np.argmax(proba)\n",
        "            error_type = self.processor.inverse_label_encoder[error_type_idx]\n",
        "            confidence = float(proba[error_type_idx])\n",
        "        \n",
        "        self.difficulty.update(correct)\n",
        "        self.game.update(correct, self.difficulty.difficulty)\n",
        "        return {\n",
        "            'word': word,\n",
        "            'correct': correct,\n",
        "            'error_type': error_type,\n",
        "            'confidence': confidence,\n",
        "            'difficulty': self.difficulty.difficulty,\n",
        "            'score': self.game.score,\n",
        "            'level': self.game.level,\n",
        "            'streak': self.game.streak\n",
        "        }"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Train Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "10/10 [==============================] - 19s 653ms/step - loss: 1.5912 - sparse_categorical_accuracy: 0.2201 - val_loss: 1.5014 - val_sparse_categorical_accuracy: 0.3250\n",
            "Epoch 2/30\n",
            "10/10 [==============================] - 1s 133ms/step - loss: 1.5243 - sparse_categorical_accuracy: 0.2987 - val_loss: 1.4688 - val_sparse_categorical_accuracy: 0.3625\n",
            "Epoch 3/30\n",
            "10/10 [==============================] - 1s 146ms/step - loss: 1.4275 - sparse_categorical_accuracy: 0.4057 - val_loss: 1.4576 - val_sparse_categorical_accuracy: 0.4000\n",
            "Epoch 4/30\n",
            "10/10 [==============================] - 1s 133ms/step - loss: 1.3419 - sparse_categorical_accuracy: 0.4686 - val_loss: 1.4378 - val_sparse_categorical_accuracy: 0.4000\n",
            "Epoch 5/30\n",
            "10/10 [==============================] - 1s 134ms/step - loss: 1.3079 - sparse_categorical_accuracy: 0.4906 - val_loss: 1.3953 - val_sparse_categorical_accuracy: 0.4000\n",
            "Epoch 6/30\n",
            "10/10 [==============================] - 1s 132ms/step - loss: 1.2075 - sparse_categorical_accuracy: 0.5597 - val_loss: 1.5108 - val_sparse_categorical_accuracy: 0.4500\n",
            "Epoch 7/30\n",
            "10/10 [==============================] - 1s 136ms/step - loss: 1.1484 - sparse_categorical_accuracy: 0.5503 - val_loss: 1.3247 - val_sparse_categorical_accuracy: 0.4500\n",
            "Epoch 8/30\n",
            "10/10 [==============================] - 2s 161ms/step - loss: 1.0799 - sparse_categorical_accuracy: 0.5535 - val_loss: 1.1877 - val_sparse_categorical_accuracy: 0.5000\n",
            "Epoch 9/30\n",
            "10/10 [==============================] - 1s 129ms/step - loss: 0.9942 - sparse_categorical_accuracy: 0.6195 - val_loss: 1.2350 - val_sparse_categorical_accuracy: 0.4625\n",
            "Epoch 10/30\n",
            "10/10 [==============================] - 1s 133ms/step - loss: 0.9164 - sparse_categorical_accuracy: 0.6415 - val_loss: 1.2797 - val_sparse_categorical_accuracy: 0.4625\n",
            "Epoch 11/30\n",
            "10/10 [==============================] - 1s 134ms/step - loss: 0.9236 - sparse_categorical_accuracy: 0.6509 - val_loss: 1.4138 - val_sparse_categorical_accuracy: 0.4375\n",
            "Epoch 12/30\n",
            "10/10 [==============================] - 1s 133ms/step - loss: 0.9360 - sparse_categorical_accuracy: 0.6164 - val_loss: 1.2085 - val_sparse_categorical_accuracy: 0.5000\n",
            "Epoch 13/30\n",
            "10/10 [==============================] - 1s 134ms/step - loss: 0.8369 - sparse_categorical_accuracy: 0.6855 - val_loss: 1.2553 - val_sparse_categorical_accuracy: 0.4625\n",
            "Epoch 14/30\n",
            "10/10 [==============================] - 1s 137ms/step - loss: 0.8103 - sparse_categorical_accuracy: 0.7044 - val_loss: 1.3358 - val_sparse_categorical_accuracy: 0.4750\n",
            "Epoch 15/30\n",
            "10/10 [==============================] - 1s 139ms/step - loss: 0.8384 - sparse_categorical_accuracy: 0.6541 - val_loss: 1.3075 - val_sparse_categorical_accuracy: 0.4250\n",
            "Epoch 16/30\n",
            "10/10 [==============================] - 1s 139ms/step - loss: 0.7742 - sparse_categorical_accuracy: 0.6981 - val_loss: 1.2809 - val_sparse_categorical_accuracy: 0.5000\n",
            "Epoch 17/30\n",
            "10/10 [==============================] - 1s 147ms/step - loss: 0.7025 - sparse_categorical_accuracy: 0.7358 - val_loss: 1.2969 - val_sparse_categorical_accuracy: 0.5250\n",
            "Epoch 18/30\n",
            "10/10 [==============================] - 2s 155ms/step - loss: 0.6594 - sparse_categorical_accuracy: 0.7547 - val_loss: 1.3619 - val_sparse_categorical_accuracy: 0.4625\n",
            "Model saved to 'spelling_tutor_model.h5'\n",
            "Metadata saved to 'spelling_tutor_metadata.json'\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "d:\\machine learning\\spelling error detection and classification system\\venv\\Lib\\site-packages\\keras\\src\\engine\\training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
            "  saving_api.save_model(\n"
          ]
        }
      ],
      "source": [
        "tutor = SpellingTutor(dataset_path=\"enhanced_spelling_errors_dataset.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(12, 4))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(tutor.history.history['sparse_categorical_accuracy'], label='Training Accuracy')\n",
        "plt.plot(tutor.history.history['val_sparse_categorical_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(tutor.history.history['loss'], label='Training Loss')\n",
        "plt.plot(tutor.history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Test Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "1/1 [==============================] - 4s 4s/step\n",
            "\n",
            "Word: girafe\n",
            "Status: ✗ Incorrect\n",
            "Error Type: Transposition (Confidence: 44.95%)\n",
            "Score: 0 | Level: 1\n",
            "Streak: 0 | Difficulty: 1\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "\n",
            "Word: mouz\n",
            "Status: ✗ Incorrect\n",
            "Error Type: Phoneme Mismatch (Confidence: 74.35%)\n",
            "Score: 0 | Level: 1\n",
            "Streak: 0 | Difficulty: 1\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "\n",
            "Word: adphones\n",
            "Status: ✗ Incorrect\n",
            "Error Type: Transposition (Confidence: 40.20%)\n",
            "Score: 0 | Level: 1\n",
            "Streak: 0 | Difficulty: 1\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "\n",
            "Word: penugn\n",
            "Status: ✗ Incorrect\n",
            "Error Type: Omission (Confidence: 40.61%)\n",
            "Score: 0 | Level: 1\n",
            "Streak: 0 | Difficulty: 1\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "\n",
            "Word: chetah\n",
            "Status: ✗ Incorrect\n",
            "Error Type: Omission (Confidence: 35.72%)\n",
            "Score: 0 | Level: 1\n",
            "Streak: 0 | Difficulty: 1\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "\n",
            "Word: senohpdaeh\n",
            "Status: ✗ Incorrect\n",
            "Error Type: Reversal (Confidence: 94.10%)\n",
            "Score: 0 | Level: 1\n",
            "Streak: 0 | Difficulty: 1\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "\n",
            "Word: keebord\n",
            "Status: ✗ Incorrect\n",
            "Error Type: Phoneme Mismatch (Confidence: 86.93%)\n",
            "Score: 0 | Level: 1\n",
            "Streak: 0 | Difficulty: 1\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "\n",
            "Word: octpus\n",
            "Status: ✗ Incorrect\n",
            "Error Type: Omission (Confidence: 58.56%)\n",
            "Score: 0 | Level: 1\n",
            "Streak: 0 | Difficulty: 1\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "\n",
            "Word: tir\n",
            "Status: ✗ Incorrect\n",
            "Error Type: Omission (Confidence: 48.87%)\n",
            "Score: 0 | Level: 1\n",
            "Streak: 0 | Difficulty: 1\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "\n",
            "Word: oran\n",
            "Status: ✗ Incorrect\n",
            "Error Type: Omission (Confidence: 34.95%)\n",
            "Score: 0 | Level: 1\n",
            "Streak: 0 | Difficulty: 1\n",
            "\n",
            "=== Grouped Results ===\n",
            "Error Type: Transposition\n",
            "  Count: 2\n",
            "  Total Score Change: 0\n",
            "  Words: girafe, adphones\n",
            "Error Type: Phoneme Mismatch\n",
            "  Count: 2\n",
            "  Total Score Change: 0\n",
            "  Words: mouz, keebord\n",
            "Error Type: Omission\n",
            "  Count: 5\n",
            "  Total Score Change: 0\n",
            "  Words: penugn, chetah, octpus, tir, oran\n",
            "Error Type: Reversal\n",
            "  Count: 1\n",
            "  Total Score Change: 0\n",
            "  Words: senohpdaeh\n"
          ]
        }
      ],
      "source": [
        "tutor_loaded = SpellingTutor(metadata_path=\"spelling_tutor_metadata.json\", model_path=\"spelling_tutor_model.h5\")\n",
        "\n",
        "test_words = ['girafe', 'mouz', 'adphones', 'penugn', 'chetah', 'senohpdaeh', 'keebord', 'octpus', 'tir', 'oran']\n",
        "\n",
        "results = []\n",
        "previous_score = 0\n",
        "\n",
        "for word in test_words:\n",
        "    result = tutor_loaded.process_word(word)\n",
        "    score_change = result['score'] - previous_score\n",
        "    results.append({\n",
        "        'word': result['word'],\n",
        "        'correct': result['correct'],\n",
        "        'error_type': result['error_type'] if not result['correct'] else 'Correct',\n",
        "        'confidence': result['confidence'] if not result['correct'] else 1.0,\n",
        "        'score_change': score_change,\n",
        "        'total_score': result['score'],\n",
        "        'streak': result['streak'],\n",
        "        'difficulty': result['difficulty']\n",
        "    })\n",
        "    previous_score = result['score']\n",
        "    print(f\"\\nWord: {result['word']}\")\n",
        "    print(f\"Status: {'Correct' if result['correct'] else 'Incorrect'}\")\n",
        "    if not result['correct']:\n",
        "        print(f\"Error Type: {result['error_type']} (Confidence: {result['confidence']:.2%})\")\n",
        "    print(f\"Score: {result['score']} | Level: {result['level']}\")\n",
        "    print(f\"Streak: {result['streak']} | Difficulty: {result['difficulty']}\")\n",
        "\n",
        "grouped_results = defaultdict(lambda: {'count': 0, 'total_score_change': 0, 'words': []})\n",
        "for result in results:\n",
        "    error_type = result['error_type']\n",
        "    grouped_results[error_type]['count'] += 1\n",
        "    grouped_results[error_type]['total_score_change'] += result['score_change']\n",
        "    grouped_results[error_type]['words'].append(result['word'])\n",
        "\n",
        "print(\"\\n=== Grouped Results ===\")\n",
        "for error_type, data in grouped_results.items():\n",
        "    print(f\"Error Type: {error_type}\")\n",
        "    print(f\"  Count: {data['count']}\")\n",
        "    print(f\"  Total Score Change: {data['total_score_change']}\")\n",
        "    print(f\"  Words: {', '.join(data['words'])}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Visualize Results"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "error_types = list(grouped_results.keys())\n",
        "counts = [grouped_results[et]['count'] for et in error_types]\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(error_types, counts, color='skyblue')\n",
        "plt.xlabel('Error Type')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Distribution of Error Types in Test Words')\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "venv",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
